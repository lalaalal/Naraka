import com.hypherionmc.modpublisher.properties.ModLoader

plugins {
    id 'com.github.johnrengelman.shadow'
    id "com.hypherionmc.modutils.modpublisher" version "2.1.7"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    maven {
        name = 'NeoForged'
        url = 'https://maven.neoforged.net/releases'
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"

    modRuntimeOnly "curse.maven:jade-324717:7056468"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

loom {
    runs {
        clientData {
            clientData()
            programArgs "--all", "--mod", "$project.mod_id"
            programArgs "--output", file("src/main/generated.neoforge").absolutePath
            programArgs "--existing", file("src/main/resources").absolutePath
        }
    }
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/neoforge.mods.toml') {
        expand version: project.version
    }
}

sourceSets.main.resources {
    srcDirs 'src/main/generated', 'src/main/generated.neoforge'
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}

publisher {
    setupPublisher()
    setLoaders(ModLoader.NEOFORGE)
}
